// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/energicryptocurrency/energi"
	"github.com/energicryptocurrency/energi/accounts/abi"
	"github.com/energicryptocurrency/energi/accounts/abi/bind"
	"github.com/energicryptocurrency/energi/common"
	"github.com/energicryptocurrency/energi/core/types"
	"github.com/energicryptocurrency/energi/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BlacklistRegistryV1ABI is the input ABI used to generate the binding from.
const BlacklistRegistryV1ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"internalType\":\"contractGen2Migration\",\"name\":\"_migration\",\"type\":\"address\"},{\"internalType\":\"contractITreasury\",\"name\":\"_compensation_fund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ebi_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIBlacklistProposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"BlacklistProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIBlacklistProposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"DrainProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIBlacklistProposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"WhitelistProposal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"EBI_signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compensation_fund\",\"outputs\":[{\"internalType\":\"contractITreasury\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes20\",\"name\":\"owner\",\"type\":\"bytes20\"}],\"name\":\"drainMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateBlocked\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateDrainable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isDrainable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"contractGen2Migration\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onDrain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposal_creator\",\"outputs\":[{\"internalType\":\"contractBlacklistV1ProposalCreator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"enforce\",\"type\":\"address\"},{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"revoke\",\"type\":\"address\"},{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"drain\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposeDrain\",\"outputs\":[{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposeRevoke\",\"outputs\":[{\"internalType\":\"contractIBlacklistProposal\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"internalType\":\"contractStorageBlacklistRegistryV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BlacklistRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const BlacklistRegistryV1Bin = ``

// DeployBlacklistRegistryV1 deploys a new Ethereum contract, binding an instance of BlacklistRegistryV1 to it.
func DeployBlacklistRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _migration common.Address, _compensation_fund common.Address, _ebi_signer common.Address) (common.Address, *types.Transaction, *BlacklistRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BlacklistRegistryV1Bin), backend, _proxy, _mnregistry_proxy, _migration, _compensation_fund, _ebi_signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// BlacklistRegistryV1Bin is the compiled bytecode of contract after deployment.
const BlacklistRegistryV1RuntimeBin = `6080604052600436106101695760003560e01c806379d7bc07116100cb578063d1e8ebda1161007f578063f444115211610059578063f4441152146105aa578063fe575a87146105bf578063fe7334e8146105ff57610169565b8063d1e8ebda1461054d578063ec55688914610580578063ee33f9d21461059557610169565b806394c210fc116100b057806394c210fc146104e3578063bc393afb146104f8578063ce5494bb1461050d57610169565b806379d7bc071461048e5780638ad4012f146104ce57610169565b80632d059305116101225780633341b445116101075780633341b4451461035f5780633502a130146103d75780635603125c1461042957610169565b80632d059305146102f65780633303bbb11461030b57610169565b806306ec16f81161015357806306ec16f81461026e5780631705a3bd146102ae578063244fcea5146102c357610169565b8062f55d9d146101d05780630126795114610212575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101dc57600080fd5b50610210600480360360208110156101f357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610614565b005b6102456004803603602081101561022857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106bc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561027a57600080fd5b506102106004803603602081101561029157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f39565b3480156102ba57600080fd5b50610245611a20565b610245600480360360208110156102d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a3c565b34801561030257600080fd5b50610245612083565b34801561031757600080fd5b5061034b6004803603602081101561032e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661209f565b604080519115158252519081900360200190f35b34801561036b57600080fd5b5061039f6004803603602081101561038257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661234c565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b3480156103e357600080fd5b50610210600480360360408110156103fa57600080fd5b50803590602001357fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016612409565b34801561043557600080fd5b5061043e6125bc565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561047a578181015183820152602001610462565b505050509050019250505060405180910390f35b34801561049a57600080fd5b50610210600480360360208110156104b157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166127b2565b3480156104da57600080fd5b506102456128b4565b3480156104ef57600080fd5b506102456128d0565b34801561050457600080fd5b5061043e6128ec565b34801561051957600080fd5b506102106004803603602081101561053057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a44565b6102456004803603602081101561056357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612ad2565b34801561058c57600080fd5b50610245612fae565b3480156105a157600080fd5b5061043e612fca565b3480156105b657600080fd5b506102456131bc565b3480156105cb57600080fd5b5061034b600480360360208110156105e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166131d8565b34801561060b57600080fd5b506102456133df565b60005473ffffffffffffffffffffffffffffffffffffffff16331461069a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106a3816133fb565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600060015460001461072f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610745683635c9adc5dea0000061350c565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b1580156107c157600080fd5b505afa1580156107d5573d6000803e3d6000fd5b505050506040513d60808110156107eb57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff831615610e3e5773ffffffffffffffffffffffffffffffffffffffff821615610b6c578173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d60208110156108a957600080fd5b505115610a89578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8116156109ed578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109d457600080fd5b505af11580156109e8573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610a6c57600080fd5b505af1158015610a80573d6000803e3d6000fd5b50505050610b67565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d6020811015610af957600080fd5b505115610b6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202831290000000000000000000000000000604482015290519081900360640190fd5b610e3e565b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb257600080fd5b505afa158015610bc6573d6000803e3d6000fd5b505050506040513d6020811015610bdc57600080fd5b50518015610c5957508273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d6020811015610c5557600080fd5b5051155b15610dd7578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ca657600080fd5b505af1158015610cba573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff811615610d3b578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d2257600080fd5b505af1158015610d36573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610dba57600080fd5b505af1158015610dce573d6000803e3d6000fd5b50505050610e3e565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202832290000000000000000000000000000604482015290519081900360640190fd5b6000610e486135bb565b604080517fac31d62200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152808416602483015291519293509087169163ac31d6229160448082019260009290919082900301818387803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918b1693507fea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557925081900360200190a260006001559695505050505050565b60015415610fa857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b15801561102857600080fd5b505afa15801561103c573d6000803e3d6000fd5b505050506040513d608081101561105257600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166110ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c6563740000000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d602081101561115a57600080fd5b50516111c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f456e666f72636520766f74696e6720696e2070726f6772657373000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d602081101561123757600080fd5b505161133d578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561128557600080fd5b505af1158015611299573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b5050505050505050611a18565b73ffffffffffffffffffffffffffffffffffffffff8116156115e9578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801561139f57600080fd5b505afa1580156113b3573d6000803e3d6000fd5b505050506040513d60208110156113c957600080fd5b505161143657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f447261696e20766f74696e6720696e2070726f67726573730000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d60208110156114a657600080fd5b50511561151457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4163636f756e74206d75737420626520647261696e6564000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b5050604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506313756c8f93506044808301939282900301818387803b15801561131c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216156119b1578173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801561164b57600080fd5b505afa15801561165f573d6000803e3d6000fd5b505050506040513d602081101561167557600080fd5b50516116e257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5265766f6b6520766f74696e6720696e2070726f677265737300000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561172857600080fd5b505afa15801561173c573d6000803e3d6000fd5b505050506040513d602081101561175257600080fd5b5051156118d3578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561180157600080fd5b505af1158015611815573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff81161561183757fe5b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050506119a8565b8173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561191b57600080fd5b505af115801561192f573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506345507a9e93506044808301939282900301818387803b15801561131c57600080fd5b50505050611a18565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f2070726f706f73616c7320726561647920746f20636f6c6c656374000000604482015290519081900360640190fd5b506000600155565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154600014611aaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055611ac568056bc75e2d6310000061350c565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192608092909190829003018186803b158015611b4057600080fd5b505afa158015611b54573d6000803e3d6000fd5b505050506040513d6080811015611b6a57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff8216611bfa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283129000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811615611dcf578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5c57600080fd5b505afa158015611c70573d6000803e3d6000fd5b505050506040513d6020811015611c8657600080fd5b5051611cf357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3957600080fd5b505afa158015611d4d573d6000803e3d6000fd5b505050506040513d6020811015611d6357600080fd5b5051611dca578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611db157600080fd5b505af1158015611dc5573d6000803e3d6000fd5b505050505b611f89565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1557600080fd5b505afa158015611e29573d6000803e3d6000fd5b505050506040513d6020811015611e3f57600080fd5b5051611eac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef257600080fd5b505afa158015611f06573d6000803e3d6000fd5b505050506040513d6020811015611f1c57600080fd5b5051611f8957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283229000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611f936135bb565b604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015280841660248301529151929350908616916345507a9e9160448082019260009290919082900301818387803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507f2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff925081900360200190a2600060015595945050505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093849384938493919092169163323ab409916024808301926080929190829003018186803b15801561211b57600080fd5b505afa15801561212f573d6000803e3d6000fd5b505050506040513d608081101561214557600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166121825760009350505050612347565b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c857600080fd5b505afa1580156121dc573d6000803e3d6000fd5b505050506040513d60208110156121f257600080fd5b50516122045760009350505050612347565b73ffffffffffffffffffffffffffffffffffffffff82161580159061229757508173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561226a57600080fd5b505afa15801561227e573d6000803e3d6000fd5b505050506040513d602081101561229457600080fd5b50515b156122a85760009350505050612347565b73ffffffffffffffffffffffffffffffffffffffff81166122cf5760009350505050612347565b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d602081101561233f57600080fd5b505193505050505b919050565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291516000938493849391169163323ab40991602480820192608092909190829003018186803b1580156123c557600080fd5b505afa1580156123d9573d6000803e3d6000fd5b505050506040513d60808110156123ef57600080fd5b508051602082015160409092015190969195509350915050565b6001541561247857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055612489606082901c61209f565b6124f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420647261696e61626c6500000000000000000000000000000000000000604482015290519081900360640190fd5b600554604080517fa723b35a000000000000000000000000000000000000000000000000000000008152600481018590527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000084166024820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a723b35a9160448082019260009290919082900301818387803b15801561258f57600080fd5b505af11580156125a3573d6000803e3d6000fd5b505050506125b38160601c613814565b50506000600155565b600354604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801561262757600080fd5b505afa15801561263b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561268257600080fd5b81019080805160405193929190846401000000008211156126a257600080fd5b9083019060208201858111156126b757600080fd5b82518660208202830111640100000000821117156126d457600080fd5b82525081516020918201928201910280838360005b838110156127015781810151838201526020016126e9565b5050505090500160405250505090506000815190505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156127ae5761275c82828151811061274f57fe5b60200260200101516131d8565b6127a957600082828151811061276e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b612717565b5090565b6001541561282157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560005473ffffffffffffffffffffffffffffffffffffffff1632146128ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420636f6e73656e73757300000000000000000000000000000000000000604482015290519081900360640190fd5b611a1881613814565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801561295757600080fd5b505afa15801561296b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156129b257600080fd5b81019080805160405193929190846401000000008211156129d257600080fd5b9083019060208201858111156129e757600080fd5b8251866020820283011164010000000082111715612a0457600080fd5b82525081516020918201928201910280838360005b83811015612a31578181015183820152602001612a19565b5050505090500160405250505090505b90565b60005473ffffffffffffffffffffffffffffffffffffffff163314612aca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612acf815b50565b6000600154600014612b4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055612b5b68056bc75e2d6310000061350c565b612b64826131d8565b612bcf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420626c61636b6c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519190921691600091839163323ab409916024808301926080929190829003018186803b158015612c4757600080fd5b505afa158015612c5b573d6000803e3d6000fd5b505050506040513d6080811015612c7157600080fd5b5060400151905073ffffffffffffffffffffffffffffffffffffffff811615612eb5578073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cda57600080fd5b505afa158015612cee573d6000803e3d6000fd5b505050506040513d6020811015612d0457600080fd5b505115612d7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74206e656564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015612db857600080fd5b505afa158015612dcc573d6000803e3d6000fd5b505050506040513d6020811015612de257600080fd5b505115612e4e578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612e3157600080fd5b505af1158015612e45573d6000803e3d6000fd5b50505050612eb5565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f566f74696e6720696e2070726f67726573730000000000000000000000000000604482015290519081900360640190fd5b6000612ebf6135bb565b604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015280841660248301529151929350908516916313756c8f9160448082019260009290919082900301818387803b158015612f3b57600080fd5b505af1158015612f4f573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8581168252915191891693507fb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea925081900360200190a26000600155949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561309057600080fd5b81019080805160405193929190846401000000008211156130b057600080fd5b9083019060208201858111156130c557600080fd5b82518660208202830111640100000000821117156130e257600080fd5b82525081516020918201928201910280838360005b8381101561310f5781810151838201526020016130f7565b5050505090500160405250505090506000815190505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156127ae5761316a82828151811061315d57fe5b602002602001015161209f565b6131b757600082828151811061317c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b613125565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093929092169183918291849163323ab409916024808301926080929190829003018186803b15801561325457600080fd5b505afa158015613268573d6000803e3d6000fd5b505050506040513d608081101561327e57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff81161580159061331f57508073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132f257600080fd5b505afa158015613306573d6000803e3d6000fd5b505050506040513d602081101561331c57600080fd5b50515b156133305760009350505050612347565b73ffffffffffffffffffffffffffffffffffffffff8216158015906133c357508173ffffffffffffffffffffffffffffffffffffffff16632173a8f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561339657600080fd5b505afa1580156133aa573d6000803e3d6000fd5b505050506040513d60208110156133c057600080fd5b50515b156133d45760019350505050612347565b506000949350505050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600354604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b15801561346f57600080fd5b505af1158015613483573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156134f157600080fd5b505af1158015613505573d6000803e3d6000fd5b5050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1661352d613ae4565b73ffffffffffffffffffffffffffffffffffffffff16141561354d575060005b803414612acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254600454600091829160609173ffffffffffffffffffffffffffffffffffffffff908116917f3e68680a00000000000000000000000000000000000000000000000000000000911661360d613ae4565b6040805173ffffffffffffffffffffffffffffffffffffffff93841660248201529190921660448083019190915282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317835290518151919290918291908083835b602083106136e657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016136a9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613746576040519150601f19603f3d011682016040523d82523d6000602084013e61374b565b606091505b50915091508181906137f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137ba5781810151838201526020016137a2565b50505050905090810190601f1680156137e75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080806020019051602081101561380b57600080fd5b50519250505090565b600354604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b15801561389057600080fd5b505afa1580156138a4573d6000803e3d6000fd5b505050506040513d60808110156138ba57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff831615613505578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561393457600080fd5b505af1158015613948573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8216156139c9578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156139b057600080fd5b505af11580156139c4573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff811615613a46578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613a2d57600080fd5b505af1158015613a41573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613ac557600080fd5b505af1158015613ad9573d6000803e3d6000fd5b505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331415613b0c575032612a41565b5033612a4156fea265627a7a72315820342547331d8cc02c483a22f276d79979d91310ecd1c073c9da01b8fec4beb7d864736f6c63430005100032`

// BlacklistRegistryV1 is an auto generated Go binding around an Ethereum contract.
type BlacklistRegistryV1 struct {
	BlacklistRegistryV1Caller     // Read-only binding to the contract
	BlacklistRegistryV1Transactor // Write-only binding to the contract
	BlacklistRegistryV1Filterer   // Log filterer for contract events
}

// BlacklistRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BlacklistRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlacklistRegistryV1Session struct {
	Contract     *BlacklistRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlacklistRegistryV1CallerSession struct {
	Contract *BlacklistRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// BlacklistRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlacklistRegistryV1TransactorSession struct {
	Contract     *BlacklistRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type BlacklistRegistryV1Raw struct {
	Contract *BlacklistRegistryV1 // Generic contract binding to access the raw methods on
}

// BlacklistRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1CallerRaw struct {
	Contract *BlacklistRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// BlacklistRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1TransactorRaw struct {
	Contract *BlacklistRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBlacklistRegistryV1 creates a new instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1(address common.Address, backend bind.ContractBackend) (*BlacklistRegistryV1, error) {
	contract, err := bindBlacklistRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// NewBlacklistRegistryV1Caller creates a new read-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*BlacklistRegistryV1Caller, error) {
	contract, err := bindBlacklistRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Caller{contract: contract}, nil
}

// NewBlacklistRegistryV1Transactor creates a new write-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*BlacklistRegistryV1Transactor, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Transactor{contract: contract}, nil
}

// NewBlacklistRegistryV1Filterer creates a new log filterer instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*BlacklistRegistryV1Filterer, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Filterer{contract: contract}, nil
}

// bindBlacklistRegistryV1 binds a generic wrapper to an already deployed contract.
func bindBlacklistRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// EBISigner is a free data retrieval call binding the contract method 0x94c210fc.
//
// Solidity: function EBI_signer() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EBISigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "EBI_signer")
	return *ret0, err
}

// EBISigner is a free data retrieval call binding the contract method 0x94c210fc.
//
// Solidity: function EBI_signer() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EBISigner() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.EBISigner(&_BlacklistRegistryV1.CallOpts)
}

// EBISigner is a free data retrieval call binding the contract method 0x94c210fc.
//
// Solidity: function EBI_signer() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EBISigner() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.EBISigner(&_BlacklistRegistryV1.CallOpts)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) CompensationFund(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "compensation_fund")
	return *ret0, err
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateAll(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateAll")
	return *ret0, err
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateBlocked(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateBlocked")
	return *ret0, err
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateDrainable(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateDrainable")
	return *ret0, err
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateDrainable() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateDrainable(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateDrainable() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateDrainable(&_BlacklistRegistryV1.CallOpts)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) IsBlacklisted(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "isBlacklisted", addr)
	return *ret0, err
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) IsDrainable(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "isDrainable", addr)
	return *ret0, err
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) IsDrainable(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsDrainable(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) IsDrainable(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsDrainable(&_BlacklistRegistryV1.CallOpts, addr)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Migration(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "migration")
	return *ret0, err
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// ProposalCreator is a free data retrieval call binding the contract method 0x8ad4012f.
//
// Solidity: function proposal_creator() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) ProposalCreator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proposal_creator")
	return *ret0, err
}

// ProposalCreator is a free data retrieval call binding the contract method 0x8ad4012f.
//
// Solidity: function proposal_creator() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) ProposalCreator() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.ProposalCreator(&_BlacklistRegistryV1.CallOpts)
}

// ProposalCreator is a free data retrieval call binding the contract method 0x8ad4012f.
//
// Solidity: function proposal_creator() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) ProposalCreator() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.ProposalCreator(&_BlacklistRegistryV1.CallOpts)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proposals(opts *bind.CallOpts, addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	ret := new(struct {
		Enforce common.Address
		Revoke  common.Address
		Drain   common.Address
	})
	out := ret
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proposals", addr)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Collect(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "collect", addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) DrainMigration(opts *bind.TransactOpts, item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "drainMigration", item_id, owner)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) DrainMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.DrainMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) DrainMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.DrainMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) OnDrain(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "onDrain", addr)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) OnDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.OnDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) OnDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.OnDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Propose(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "propose", addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) ProposeDrain(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "proposeDrain", addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) ProposeDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) ProposeDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) ProposeRevoke(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "proposeRevoke", addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) ProposeRevoke(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeRevoke(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) ProposeRevoke(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeRevoke(&_BlacklistRegistryV1.TransactOpts, addr)
}

// BlacklistRegistryV1BlacklistProposalIterator is returned from FilterBlacklistProposal and is used to iterate over the raw logs and unpacked data for BlacklistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposalIterator struct {
	Event *BlacklistRegistryV1BlacklistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1BlacklistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1BlacklistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1BlacklistProposal represents a BlacklistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBlacklistProposal is a free log retrieval operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterBlacklistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1BlacklistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1BlacklistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "BlacklistProposal", logs: logs, sub: sub}, nil
}

// WatchBlacklistProposal is a free log subscription operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchBlacklistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1BlacklistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1BlacklistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "BlacklistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BlacklistRegistryV1DrainProposalIterator is returned from FilterDrainProposal and is used to iterate over the raw logs and unpacked data for DrainProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1DrainProposalIterator struct {
	Event *BlacklistRegistryV1DrainProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1DrainProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1DrainProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1DrainProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1DrainProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1DrainProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1DrainProposal represents a DrainProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1DrainProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDrainProposal is a free log retrieval operation binding the contract event 0xb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea.
//
// Solidity: event DrainProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterDrainProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1DrainProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "DrainProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1DrainProposalIterator{contract: _BlacklistRegistryV1.contract, event: "DrainProposal", logs: logs, sub: sub}, nil
}

// WatchDrainProposal is a free log subscription operation binding the contract event 0xb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea.
//
// Solidity: event DrainProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchDrainProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1DrainProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "DrainProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1DrainProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "DrainProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BlacklistRegistryV1WhitelistProposalIterator is returned from FilterWhitelistProposal and is used to iterate over the raw logs and unpacked data for WhitelistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposalIterator struct {
	Event *BlacklistRegistryV1WhitelistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1WhitelistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1WhitelistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1WhitelistProposal represents a WhitelistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWhitelistProposal is a free log retrieval operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterWhitelistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1WhitelistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1WhitelistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "WhitelistProposal", logs: logs, sub: sub}, nil
}

// WatchWhitelistProposal is a free log subscription operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchWhitelistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1WhitelistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1WhitelistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "WhitelistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
